name: Build macOS Wallet

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  build-macos-intel:
    name: Build macOS (Intel x86_64)
    runs-on: macos-12  # macOS 12 Monterey as required
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: System Information
      run: |
        echo "🍎 macOS Build Environment"
        echo "=========================="
        echo "macOS Version: $(sw_vers -productVersion)"
        echo "Xcode Version: $(xcode-select --print-path)"
        echo "Architecture: $(uname -m)"
        echo "CPU Info: $(sysctl -n machdep.cpu.brand_string)"
        echo "Available CPUs: $(sysctl -n hw.ncpu)"

    - name: Install Xcode Command Line Tools
      run: |
        # Ensure Xcode command line tools are installed
        xcode-select --install 2>/dev/null || echo "Command line tools already installed"
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

    - name: Clean Protobuf Installation
      run: |
        echo "🧹 Ensuring clean Protobuf environment..."
        brew uninstall --ignore-dependencies protobuf 2>/dev/null || echo "No existing protobuf to remove"
        brew cleanup 2>/dev/null || true

    - name: Install Homebrew Dependencies
      run: |
        echo "📦 Installing dependencies via Homebrew..."
        brew update
        brew install \
          automake \
          berkeley-db4 \
          libtool \
          boost \
          miniupnpc \
          libnatpmp \
          pkg-config \
          python@3.11 \
          qt@5 \
          zmq \
          qrencode

    - name: Install Protobuf 3.6.1 Locally
      run: |
        echo "🔧 Installing Protobuf 3.6.1 locally to avoid incompatibility..."
        mkdir -p local
        cd local
        
        # Download and extract Protobuf 3.6.1
        curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-cpp-3.6.1.tar.gz | tar xz
        cd protobuf-3.6.1
        
        # Configure for both Intel and Apple Silicon support
        ./configure \
          --prefix=${{ github.workspace }}/local/protobuf-3.6.1 \
          --disable-shared \
          --enable-static
        
        # Build and install
        make -j$(sysctl -n hw.ncpu)
        make install
        
        echo "✅ Protobuf 3.6.1 installed successfully"
        echo "Protobuf location: ${{ github.workspace }}/local/protobuf-3.6.1"
        ls -la ${{ github.workspace }}/local/protobuf-3.6.1/bin/

    - name: Fix file permissions
      run: |
        echo "🔧 Fixing file permissions..."
        find . -name "*.sh" -exec chmod +x {} \;
        find . -name "config.guess" -exec chmod +x {} \;
        find . -name "config.sub" -exec chmod +x {} \;
        find . -name "configure" -exec chmod +x {} \;
        if [ -f autogen.sh ]; then chmod +x autogen.sh; fi

    - name: Build dependencies
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include"
        CXXFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
        CFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
      run: |
        echo "🏗️ Building dependencies for macOS Intel..."
        echo "Using Protobuf: $PROTOC"
        $PROTOC --version
        
        cd depends
        make HOST=x86_64-apple-darwin -j$(sysctl -n hw.ncpu)

    - name: Run autogen
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
      run: |
        echo "🔄 Running autogen..."
        ./autogen.sh

    - name: Configure build
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include"
        CXXFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
        CFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
      run: |
        echo "⚙️ Configuring build for macOS Intel..."
        CONFIG_SITE=$PWD/depends/x86_64-apple-darwin/share/config.site ./configure \
          --prefix=/ \
          --with-qt-dir=$(brew --prefix qt@5) \
          --enable-reduce-exports \
          --disable-bench \
          --disable-gui-tests

    - name: Build wallet
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include"
        CXXFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
        CFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
      run: |
        echo "🔨 Building Aegisum wallet for macOS Intel..."
        make -j$(sysctl -n hw.ncpu)

    - name: Create macOS App Bundle
      run: |
        if [ -f src/qt/aegisum-qt ]; then
          echo "🍎 Creating macOS app bundle..."
          mkdir -p Aegisum-Qt.app/Contents/MacOS
          mkdir -p Aegisum-Qt.app/Contents/Resources
          
          # Copy the binary
          cp src/qt/aegisum-qt Aegisum-Qt.app/Contents/MacOS/
          
          # Create Info.plist
          cat > Aegisum-Qt.app/Contents/Info.plist << "EOF"
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>aegisum-qt</string>
            <key>CFBundleIdentifier</key>
            <string>com.aegisum.aegisum-qt</string>
            <key>CFBundleName</key>
            <string>Aegisum</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>12.0</string>
        </dict>
        </plist>
        EOF
          echo "✅ App bundle created"
        else
          echo "ℹ️ No Qt wallet built, skipping app bundle creation"
        fi

    - name: Package wallet tools
      run: |
        echo "📦 Packaging macOS wallet tools..."
        mkdir -p aegisum-wallet-tools-macos-intel
        cp src/aegisumd aegisum-wallet-tools-macos-intel/
        cp src/aegisum-cli aegisum-wallet-tools-macos-intel/
        cp src/aegisum-tx aegisum-wallet-tools-macos-intel/
        if [ -f src/qt/aegisum-qt ]; then
          cp src/qt/aegisum-qt aegisum-wallet-tools-macos-intel/
        fi
        if [ -d Aegisum-Qt.app ]; then
          cp -r Aegisum-Qt.app aegisum-wallet-tools-macos-intel/
        fi
        tar -czf aegisum-wallet-tools-macos-intel-x86_64.tar.gz aegisum-wallet-tools-macos-intel/

    - name: Upload macOS wallet tools
      uses: actions/upload-artifact@v4
      with:
        name: aegisum-wallet-tools-macos-intel-x86_64
        path: aegisum-wallet-tools-macos-intel-x86_64.tar.gz
        retention-days: 30

    - name: Build Summary
      run: |
        echo "🎉 MACOS INTEL BUILD COMPLETED SUCCESSFULLY!"
        echo "📁 Built files:"
        ls -la aegisum-wallet-tools-macos-intel/
        echo ""
        echo "🍎 macOS Monterey (12+) compatible"
        echo "💻 Intel x86_64 architecture"
        echo "🔧 Protobuf 3.6.1 locally installed"
        echo "📦 Homebrew dependencies used"

  build-macos-arm:
    name: Build macOS (Apple Silicon ARM64)
    runs-on: macos-14  # macOS 14 for Apple Silicon
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: System Information
      run: |
        echo "🍎 macOS Apple Silicon Build Environment"
        echo "======================================="
        echo "macOS Version: $(sw_vers -productVersion)"
        echo "Xcode Version: $(xcode-select --print-path)"
        echo "Architecture: $(uname -m)"
        echo "CPU Info: $(sysctl -n machdep.cpu.brand_string)"
        echo "Available CPUs: $(sysctl -n hw.ncpu)"

    - name: Install Xcode Command Line Tools
      run: |
        # Ensure Xcode command line tools are installed
        xcode-select --install 2>/dev/null || echo "Command line tools already installed"
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

    - name: Clean Protobuf Installation
      run: |
        echo "🧹 Ensuring clean Protobuf environment..."
        brew uninstall --ignore-dependencies protobuf 2>/dev/null || echo "No existing protobuf to remove"
        brew cleanup 2>/dev/null || true

    - name: Install Homebrew Dependencies
      run: |
        echo "📦 Installing dependencies via Homebrew..."
        brew update
        brew install \
          automake \
          berkeley-db4 \
          libtool \
          boost \
          miniupnpc \
          libnatpmp \
          pkg-config \
          python@3.11 \
          qt@5 \
          zmq \
          qrencode

    - name: Install Protobuf 3.6.1 Locally
      run: |
        echo "🔧 Installing Protobuf 3.6.1 locally for Apple Silicon..."
        mkdir -p local
        cd local
        
        # Download and extract Protobuf 3.6.1
        curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-cpp-3.6.1.tar.gz | tar xz
        cd protobuf-3.6.1
        
        # Configure for Apple Silicon
        ./configure \
          --prefix=${{ github.workspace }}/local/protobuf-3.6.1 \
          --disable-shared \
          --enable-static \
          --host=aarch64-apple-darwin
        
        # Build and install
        make -j$(sysctl -n hw.ncpu)
        make install
        
        echo "✅ Protobuf 3.6.1 installed successfully for Apple Silicon"
        echo "Protobuf location: ${{ github.workspace }}/local/protobuf-3.6.1"
        ls -la ${{ github.workspace }}/local/protobuf-3.6.1/bin/

    - name: Fix file permissions
      run: |
        echo "🔧 Fixing file permissions..."
        find . -name "*.sh" -exec chmod +x {} \;
        find . -name "config.guess" -exec chmod +x {} \;
        find . -name "config.sub" -exec chmod +x {} \;
        find . -name "configure" -exec chmod +x {} \;
        if [ -f autogen.sh ]; then chmod +x autogen.sh; fi

    - name: Build dependencies
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include"
        CXXFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
        CFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
      run: |
        echo "🏗️ Building dependencies for macOS Apple Silicon..."
        echo "Using Protobuf: $PROTOC"
        $PROTOC --version
        
        cd depends
        make HOST=aarch64-apple-darwin -j$(sysctl -n hw.ncpu)

    - name: Run autogen
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
      run: |
        echo "🔄 Running autogen..."
        ./autogen.sh

    - name: Configure build
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include"
        CXXFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
        CFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
      run: |
        echo "⚙️ Configuring build for macOS Apple Silicon..."
        CONFIG_SITE=$PWD/depends/aarch64-apple-darwin/share/config.site ./configure \
          --prefix=/ \
          --with-qt-dir=$(brew --prefix qt@5) \
          --enable-reduce-exports \
          --disable-bench \
          --disable-gui-tests

    - name: Build wallet
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include"
        CXXFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
        CFLAGS: "-Wno-deprecated-declarations -Wno-error=deprecated-declarations"
      run: |
        echo "🔨 Building Aegisum wallet for macOS Apple Silicon..."
        make -j$(sysctl -n hw.ncpu)

    - name: Create macOS App Bundle
      run: |
        if [ -f src/qt/aegisum-qt ]; then
          echo "🍎 Creating macOS app bundle for Apple Silicon..."
          mkdir -p Aegisum-Qt.app/Contents/MacOS
          mkdir -p Aegisum-Qt.app/Contents/Resources
          
          # Copy the binary
          cp src/qt/aegisum-qt Aegisum-Qt.app/Contents/MacOS/
          
          # Create Info.plist
          cat > Aegisum-Qt.app/Contents/Info.plist << "EOF"
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>aegisum-qt</string>
            <key>CFBundleIdentifier</key>
            <string>com.aegisum.aegisum-qt</string>
            <key>CFBundleName</key>
            <string>Aegisum</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>12.0</string>
            <key>LSArchitecturePriority</key>
            <array>
                <string>arm64</string>
            </array>
        </dict>
        </plist>
        EOF
          echo "✅ App bundle created for Apple Silicon"
        else
          echo "ℹ️ No Qt wallet built, skipping app bundle creation"
        fi

    - name: Package wallet tools
      run: |
        echo "📦 Packaging macOS Apple Silicon wallet tools..."
        mkdir -p aegisum-wallet-tools-macos-arm64
        cp src/aegisumd aegisum-wallet-tools-macos-arm64/
        cp src/aegisum-cli aegisum-wallet-tools-macos-arm64/
        cp src/aegisum-tx aegisum-wallet-tools-macos-arm64/
        if [ -f src/qt/aegisum-qt ]; then
          cp src/qt/aegisum-qt aegisum-wallet-tools-macos-arm64/
        fi
        if [ -d Aegisum-Qt.app ]; then
          cp -r Aegisum-Qt.app aegisum-wallet-tools-macos-arm64/
        fi
        tar -czf aegisum-wallet-tools-macos-arm64.tar.gz aegisum-wallet-tools-macos-arm64/

    - name: Upload macOS wallet tools
      uses: actions/upload-artifact@v4
      with:
        name: aegisum-wallet-tools-macos-arm64
        path: aegisum-wallet-tools-macos-arm64.tar.gz
        retention-days: 30

    - name: Build Summary
      run: |
        echo "🎉 MACOS APPLE SILICON BUILD COMPLETED SUCCESSFULLY!"
        echo "📁 Built files:"
        ls -la aegisum-wallet-tools-macos-arm64/
        echo ""
        echo "🍎 macOS Monterey (12+) compatible"
        echo "🚀 Apple Silicon ARM64 architecture"
        echo "🔧 Protobuf 3.6.1 locally installed"
        echo "📦 Homebrew dependencies used"
