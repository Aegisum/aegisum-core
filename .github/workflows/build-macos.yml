name: Build macOS Wallet

on:
  workflow_dispatch:
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  build-macos-universal:
    name: Build macOS (Universal)
    runs-on: macos-13
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: System Information
      run: |
        echo "üçé macOS Build Environment"
        echo "=========================="
        echo "macOS Version: $(sw_vers -productVersion)"
        echo "Architecture: $(uname -m)"
        echo "Available CPUs: $(sysctl -n hw.ncpu)"

    - name: Install Dependencies
      continue-on-error: true
      run: |
        echo "üì¶ Installing dependencies..."
        set +e  # Don't exit on errors
        
        brew update
        
        # Install all required dependencies
        brew install \
          automake \
          libtool \
          boost \
          miniupnpc \
          libnatpmp \
          pkg-config \
          python@3.11 \
          qt@5 \
          zmq \
          qrencode \
          protobuf \
          fmt \
          openssl \
          libevent \
          sqlite
        
        echo "‚úÖ Dependencies installed"
        set -e

    - name: Setup Python Environment Properly
      run: |
        echo "üêç Setting up Python environment for depends build..."
        
        # Force link Python, ignoring conflicts
        brew link --overwrite --force python@3.11 2>/dev/null || echo "Python linking completed"
        
        # Add Homebrew Python to PATH
        export PATH="/usr/local/opt/python@3.11/bin:$PATH"
        
        # Verify Python installation
        echo "Python version: $(python3 --version)"
        echo "Python location: $(which python3)"
        
        # Install setuptools globally with --break-system-packages
        python3 -m pip install --break-system-packages --upgrade pip setuptools wheel ez_setup
        
        # Verify setuptools is available
        python3 -c "import setuptools; print('setuptools version:', setuptools.__version__)"
        python3 -c "import ez_setup; print('ez_setup available')" || echo "ez_setup not available, but setuptools should work"
        
        # Make sure the Python environment is available for subsequent steps
        echo "PATH=/usr/local/opt/python@3.11/bin:$PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=/usr/local/lib/python3.11/site-packages" >> $GITHUB_ENV

    - name: Install Protobuf 3.6.1 from source
      run: |
        echo "üîß Installing Protobuf 3.6.1 from source..."
        mkdir -p ${{ github.workspace }}/local
        cd ${{ github.workspace }}/local
        
        curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-cpp-3.6.1.tar.gz | tar xz
        cd protobuf-3.6.1
        
        ./configure --prefix=${{ github.workspace }}/local/protobuf-3.6.1 --disable-shared --enable-static
        make -j$(sysctl -n hw.ncpu)
        make install
        
        echo "‚úÖ Protobuf 3.6.1 installed"

    - name: Fix file permissions
      run: |
        echo "üîß Fixing file permissions..."
        find . -name "*.sh" -exec chmod +x {} \;
        find . -name "config.guess" -exec chmod +x {} \;
        find . -name "config.sub" -exec chmod +x {} \;
        find . -name "configure" -exec chmod +x {} \;
        if [ -f autogen.sh ]; then chmod +x autogen.sh; fi

    - name: Build using depends system (includes Berkeley DB)
      env:
        PATH: "/usr/local/opt/python@3.11/bin:${{ github.workspace }}/local/protobuf-3.6.1/bin:/usr/local/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include"
        PYTHONPATH: "/usr/local/lib/python3.11/site-packages"
      run: |
        echo "üèóÔ∏è Building dependencies using depends system..."
        
        # Verify Python environment before building
        echo "Python in PATH: $(which python3)"
        python3 -c "import setuptools; print('‚úÖ setuptools available')"
        
        cd depends
        
        # Build all dependencies including Berkeley DB for macOS
        make HOST=x86_64-apple-darwin -j$(sysctl -n hw.ncpu)
        
        cd ..
        
        echo "üîß Configuring build with depends..."
        ./autogen.sh
        
        CONFIG_SITE=$PWD/depends/x86_64-apple-darwin/share/config.site ./configure \
          --prefix=/ \
          --enable-reduce-exports \
          --disable-bench \
          --disable-gui-tests \
          --disable-tests
        
        echo "üî® Building Aegisum with full wallet support..."
        make -j$(sysctl -n hw.ncpu)

    - name: Fallback build with system libraries (no wallet)
      if: failure()
      continue-on-error: true
      env:
        PATH: "/usr/local/opt/python@3.11/bin:${{ github.workspace }}/local/protobuf-3.6.1/bin:/usr/local/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig:/usr/local/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib -L/usr/local/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include -I/usr/local/include"
        CXXFLAGS: "-std=c++17"
      run: |
        echo "üîÑ Depends build failed, trying system libraries without wallet..."
        make clean || true
        
        ./autogen.sh
        
        ./configure \
          --prefix=${{ github.workspace }}/dist \
          --with-boost=/usr/local \
          --with-qt-dir=/usr/local/opt/qt@5 \
          --enable-reduce-exports \
          --disable-bench \
          --disable-gui-tests \
          --disable-tests \
          --disable-wallet \
          --with-libs \
          PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/local/opt/qt@5/lib/pkgconfig:${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig" \
          LDFLAGS="-L/usr/local/lib -L${{ github.workspace }}/local/protobuf-3.6.1/lib" \
          CPPFLAGS="-I/usr/local/include -I${{ github.workspace }}/local/protobuf-3.6.1/include" \
          LIBS="-lfmt"
        
        echo "üî® Building without wallet as fallback..."
        make -j$(sysctl -n hw.ncpu)

    - name: Try Berkeley DB 18.1 as final fallback
      if: failure()
      continue-on-error: true
      run: |
        echo "üîÑ Trying with newer Berkeley DB 18.1..."
        
        # Install Berkeley DB 18.1 which has better macOS support
        cd /tmp
        curl -O https://download.oracle.com/berkeley-db/db-18.1.40.tar.gz
        tar xzf db-18.1.40.tar.gz
        cd db-18.1.40/build_unix
        
        ../dist/configure \
          --prefix=/usr/local \
          --enable-cxx \
          --enable-static \
          --disable-shared \
          --disable-replication \
          --with-pic
        
        make -j$(sysctl -n hw.ncpu)
        sudo make install
        
        cd ${{ github.workspace }}
        
        # Try building with the newer Berkeley DB
        make clean || true
        ./autogen.sh
        
        ./configure \
          --prefix=${{ github.workspace }}/dist \
          --with-boost=/usr/local \
          --with-qt-dir=/usr/local/opt/qt@5 \
          --enable-reduce-exports \
          --disable-bench \
          --disable-gui-tests \
          --disable-tests \
          --with-libs \
          --with-incompatible-bdb \
          PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/local/opt/qt@5/lib/pkgconfig:${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig" \
          LDFLAGS="-L/usr/local/lib -L${{ github.workspace }}/local/protobuf-3.6.1/lib" \
          CPPFLAGS="-I/usr/local/include -I${{ github.workspace }}/local/protobuf-3.6.1/include" \
          BDB_LIBS="-L/usr/local/lib -ldb_cxx-18.1" \
          BDB_CFLAGS="-I/usr/local/include" \
          LIBS="-lfmt"
        
        echo "üî® Building with Berkeley DB 18.1..."
        make -j$(sysctl -n hw.ncpu)

    - name: Package wallet tools
      run: |
        echo "üì¶ Packaging macOS wallet tools..."
        mkdir -p aegisum-wallet-tools-macos
        
        # Copy binaries that were built
        for binary in aegisumd aegisum-cli aegisum-tx; do
          if [ -f "src/$binary" ]; then
            cp "src/$binary" aegisum-wallet-tools-macos/
            echo "‚úÖ $binary included"
          else
            echo "‚ö†Ô∏è $binary not found"
          fi
        done
        
        # Check for Qt wallet
        if [ -f src/qt/aegisum-qt ]; then
          cp src/qt/aegisum-qt aegisum-wallet-tools-macos/
          echo "‚úÖ aegisum-qt included"
        else
          echo "‚ö†Ô∏è aegisum-qt not found"
        fi
        
        # Show what we actually built
        echo "üìÅ Final package contents:"
        ls -la aegisum-wallet-tools-macos/
        
        # Create archive only if we have files
        if [ "$(ls -A aegisum-wallet-tools-macos/)" ]; then
          tar -czf aegisum-wallet-tools-macos.tar.gz aegisum-wallet-tools-macos/
          echo "‚úÖ Archive created successfully"
        else
          echo "‚ùå No binaries were built"
          exit 1
        fi

    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: aegisum-wallet-tools-macos
        path: aegisum-wallet-tools-macos.tar.gz
        retention-days: 30

    - name: Build Summary
      if: always()
      run: |
        echo "üéâ MACOS BUILD SUMMARY"
        echo "====================="
        if [ -d aegisum-wallet-tools-macos ]; then
          echo "üìÅ Built files:"
          ls -la aegisum-wallet-tools-macos/
          echo ""
          echo "üîç Binary details:"
          for binary in aegisum-wallet-tools-macos/*; do
            if [ -f "$binary" ]; then
              echo "$(basename "$binary"): $(file "$binary")"
            fi
          done
        else
          echo "‚ùå No binaries were built"
        fi
        
        if [ -f aegisum-wallet-tools-macos.tar.gz ]; then
          echo "üìä Archive info:"
          ls -la *.tar.gz
        fi
        
        echo ""
        echo "üìã Build strategy attempted:"
        echo "1. Depends system (includes proper Berkeley DB)"
        echo "2. System libraries without wallet (fallback)"
        echo "3. Berkeley DB 18.1 with wallet (final fallback)"
