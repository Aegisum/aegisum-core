name: Build macOS Wallet

on:
  workflow_dispatch:
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  build-macos-universal:
    name: Build macOS (Universal)
    runs-on: macos-13
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: System Information
      run: |
        echo "üçé macOS Build Environment"
        echo "=========================="
        echo "macOS Version: $(sw_vers -productVersion)"
        echo "Architecture: $(uname -m)"
        echo "Available CPUs: $(sysctl -n hw.ncpu)"

    - name: Install Dependencies (ignore linking warnings)
      continue-on-error: true
      run: |
        echo "üì¶ Installing dependencies..."
        set +e  # Don't exit on errors
        
        brew update
        
        # Install dependencies one by one, continuing on errors
        brew install automake || echo "automake install had issues"
        brew install libtool || echo "libtool install had issues"
        brew install boost || echo "boost install had issues"
        brew install miniupnpc || echo "miniupnpc install had issues"
        brew install libnatpmp || echo "libnatpmp install had issues"
        brew install pkg-config || echo "pkg-config install had issues"
        brew install python@3.11 || echo "python@3.11 install had issues"
        brew install qt@5 || echo "qt@5 install had issues"
        brew install zmq || echo "zmq install had issues"
        brew install qrencode || echo "qrencode install had issues"
        brew install protobuf || echo "protobuf install had issues"
        
        echo "‚úÖ Dependency installation completed (some warnings are normal)"
        set -e  # Re-enable exit on errors

    - name: Force Python linking and setup
      run: |
        echo "üêç Setting up Python environment..."
        
        # Force link Python, ignoring conflicts
        brew link --overwrite --force python@3.11 || echo "Python linking completed with warnings"
        
        # Try multiple Python paths and methods
        PYTHON_PATHS=(
          "/usr/local/opt/python@3.11/bin/python3.11"
          "/usr/local/bin/python3.11"
          "/usr/bin/python3"
          "python3"
        )
        
        for python_path in "${PYTHON_PATHS[@]}"; do
          if command -v "$python_path" >/dev/null 2>&1; then
            echo "‚úÖ Found Python at: $python_path"
            $python_path --version
            
            # Try to install setuptools
            $python_path -m pip install --break-system-packages --upgrade pip setuptools wheel 2>/dev/null || \
            $python_path -m pip install --user --upgrade pip setuptools wheel 2>/dev/null || \
            echo "Python setup attempted for $python_path"
            
            # Test setuptools
            $python_path -c "import setuptools; print('setuptools available')" 2>/dev/null || echo "setuptools test completed"
            break
          fi
        done

    - name: Install Berkeley DB from source
      run: |
        echo "üîß Installing Berkeley DB 4.8 from source..."
        cd /tmp
        curl -O https://download.oracle.com/berkeley-db/db-4.8.30.tar.gz
        tar xzf db-4.8.30.tar.gz
        cd db-4.8.30/build_unix
        ../dist/configure --prefix=/usr/local --enable-cxx --disable-shared
        make -j$(sysctl -n hw.ncpu)
        sudo make install
        echo "‚úÖ Berkeley DB installed"

    - name: Install Protobuf 3.6.1 from source
      run: |
        echo "üîß Installing Protobuf 3.6.1 from source..."
        mkdir -p ${{ github.workspace }}/local
        cd ${{ github.workspace }}/local
        
        curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-cpp-3.6.1.tar.gz | tar xz
        cd protobuf-3.6.1
        
        ./configure --prefix=${{ github.workspace }}/local/protobuf-3.6.1 --disable-shared --enable-static
        make -j$(sysctl -n hw.ncpu)
        make install
        
        echo "‚úÖ Protobuf 3.6.1 installed"
        ls -la ${{ github.workspace }}/local/protobuf-3.6.1/bin/

    - name: Fix file permissions
      run: |
        echo "üîß Fixing file permissions..."
        find . -name "*.sh" -exec chmod +x {} \;
        find . -name "config.guess" -exec chmod +x {} \;
        find . -name "config.sub" -exec chmod +x {} \;
        find . -name "configure" -exec chmod +x {} \;
        if [ -f autogen.sh ]; then chmod +x autogen.sh; fi

    - name: Build with depends
      env:
        PATH: "${{ github.workspace }}/local/protobuf-3.6.1/bin:/usr/local/bin:/usr/bin:/bin"
        PKG_CONFIG_PATH: "${{ github.workspace }}/local/protobuf-3.6.1/lib/pkgconfig"
        PROTOC: "${{ github.workspace }}/local/protobuf-3.6.1/bin/protoc"
        LDFLAGS: "-L${{ github.workspace }}/local/protobuf-3.6.1/lib -L/usr/local/lib"
        CPPFLAGS: "-I${{ github.workspace }}/local/protobuf-3.6.1/include -I/usr/local/include"
      run: |
        echo "üèóÔ∏è Building dependencies..."
        cd depends
        make HOST=x86_64-apple-darwin -j$(sysctl -n hw.ncpu)
        cd ..
        
        echo "üîß Configuring build..."
        ./autogen.sh
        CONFIG_SITE=$PWD/depends/x86_64-apple-darwin/share/config.site ./configure \
          --prefix=/ \
          --enable-reduce-exports \
          --disable-bench \
          --disable-gui-tests
        
        echo "üî® Building Aegisum..."
        make -j$(sysctl -n hw.ncpu)

    - name: Fallback build with system libraries
      if: failure()
      run: |
        echo "üîÑ Depends build failed, trying system libraries..."
        make clean || true
        
        ./configure \
          --prefix=${{ github.workspace }}/dist \
          --with-boost=/usr/local \
          --with-qt-dir=/usr/local/opt/qt@5 \
          --enable-reduce-exports \
          --disable-bench \
          --disable-gui-tests \
          --disable-tests \
          PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/local/opt/qt@5/lib/pkgconfig" \
          LDFLAGS="-L/usr/local/lib" \
          CPPFLAGS="-I/usr/local/include" || {
            echo "‚ùå Full configure failed, trying minimal build..."
            ./configure \
              --prefix=${{ github.workspace }}/dist \
              --with-boost=/usr/local \
              --enable-reduce-exports \
              --disable-bench \
              --disable-gui-tests \
              --disable-tests \
              --disable-wallet \
              --disable-qt \
              PKG_CONFIG_PATH="/usr/local/lib/pkgconfig" \
              LDFLAGS="-L/usr/local/lib" \
              CPPFLAGS="-I/usr/local/include"
          }
        
        echo "üî® Building with system libraries..."
        make -j$(sysctl -n hw.ncpu)

    - name: Package wallet tools
      run: |
        echo "üì¶ Packaging macOS wallet tools..."
        mkdir -p aegisum-wallet-tools-macos
        
        # Copy binaries that were built
        for binary in aegisumd aegisum-cli aegisum-tx; do
          if [ -f "src/$binary" ]; then
            cp "src/$binary" aegisum-wallet-tools-macos/
            echo "‚úÖ $binary included"
          else
            echo "‚ö†Ô∏è $binary not found"
          fi
        done
        
        # Check for Qt wallet
        if [ -f src/qt/aegisum-qt ]; then
          cp src/qt/aegisum-qt aegisum-wallet-tools-macos/
          echo "‚úÖ aegisum-qt included"
        else
          echo "‚ö†Ô∏è aegisum-qt not found"
        fi
        
        # Show what we actually built
        echo "üìÅ Final package contents:"
        ls -la aegisum-wallet-tools-macos/
        
        # Create archive only if we have files
        if [ "$(ls -A aegisum-wallet-tools-macos/)" ]; then
          tar -czf aegisum-wallet-tools-macos.tar.gz aegisum-wallet-tools-macos/
          echo "‚úÖ Archive created successfully"
        else
          echo "‚ùå No binaries were built"
          exit 1
        fi

    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: aegisum-wallet-tools-macos
        path: aegisum-wallet-tools-macos.tar.gz
        retention-days: 30

    - name: Build Summary
      if: always()
      run: |
        echo "üéâ MACOS BUILD SUMMARY"
        echo "====================="
        if [ -d aegisum-wallet-tools-macos ]; then
          echo "üìÅ Built files:"
          ls -la aegisum-wallet-tools-macos/
          echo ""
          echo "üîç Binary details:"
          for binary in aegisum-wallet-tools-macos/*; do
            if [ -f "$binary" ]; then
              echo "$(basename "$binary"): $(file "$binary")"
            fi
          done
        else
          echo "‚ùå No binaries were built"
        fi
        
        if [ -f aegisum-wallet-tools-macos.tar.gz ]; then
          echo "üìä Archive info:"
          ls -la *.tar.gz
        fi
